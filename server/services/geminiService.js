// Gemini AI Service for Real LLM Integration
// Handles actual API calls to Google's Gemini 2.5 Pro model

import { GoogleGenerativeAI } from '@google/generative-ai';

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.model = process.env.LLM_MODEL || 'gemini-2.5-pro';
    
    if (!this.apiKey) {
      console.warn('⚠️ GEMINI_API_KEY not found in environment variables');
      this.genAI = null;
    } else {
      this.genAI = new GoogleGenerativeAI(this.apiKey);
      console.log('✅ Gemini AI service initialized with model:', this.model);
    }
  }

  /**
   * Generate response using Gemini 2.5 Pro
   */
  async generateResponse(prompt, options = {}) {
    if (!this.genAI) {
      throw new Error('Gemini API key not configured');
    }

    try {
      const model = this.genAI.getGenerativeModel({ 
        model: this.model,
        generationConfig: {
          temperature: options.temperature || 0.7,
          maxOutputTokens: options.maxTokens || 500,
          topP: 0.8,
          topK: 40,
        },
      });

      console.log('🤖 Calling Gemini 2.5 Pro API...', {
        model: this.model,
        promptLength: prompt.length,
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 500
      });

      const startTime = Date.now();
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      const responseTime = Date.now() - startTime;

      console.log('✅ Gemini response generated in', responseTime + 'ms');
      console.log('📝 Response text length:', text.length);
      console.log('📝 Response preview:', text.substring(0, 100) + (text.length > 100 ? '...' : ''));
      
      if (!text || text.trim() === '') {
        console.warn('⚠️ Empty response from Gemini API');
        console.log('🔍 Raw response object:', response);
        console.log('🔍 Prompt that generated empty response:', prompt.substring(0, 200) + '...');
      }

      // Handle empty responses
      if (!text || text.trim() === '') {
        throw new Error('Gemini API returned empty response - possibly content filtered');
      }

      // Calculate confidence based on response quality
      const confidence = this.calculateConfidence(text, prompt);

      return {
        response: text,
        confidence: confidence,
        reasoning: `Generated by Gemini 2.5 Pro in ${responseTime}ms`,
        suggestedActions: this.extractSuggestedActions(text),
        metadata: {
          model: this.model,
          responseTime: responseTime,
          inputTokens: this.estimateTokens(prompt),
          outputTokens: this.estimateTokens(text)
        }
      };

    } catch (error) {
      console.error('❌ Gemini API error:', error);
      
      // Handle specific error types
      if (error.message.includes('API_KEY')) {
        throw new Error('Invalid Gemini API key');
      } else if (error.message.includes('QUOTA')) {
        throw new Error('Gemini API quota exceeded');
      } else if (error.message.includes('RATE_LIMIT')) {
        throw new Error('Gemini API rate limit exceeded');
      } else {
        throw new Error(`Gemini API error: ${error.message}`);
      }
    }
  }

  /**
   * Calculate response confidence based on various factors
   */
  calculateConfidence(response, prompt) {
    let confidence = 0.7; // Base confidence

    // Increase confidence for longer, more detailed responses
    if (response.length > 100) confidence += 0.1;
    if (response.length > 200) confidence += 0.1;

    // Increase confidence if response addresses the prompt well
    const promptWords = prompt.toLowerCase().split(' ');
    const responseWords = response.toLowerCase().split(' ');
    const relevantWords = promptWords.filter(word => 
      responseWords.includes(word) && word.length > 3
    );
    
    if (relevantWords.length / promptWords.length > 0.3) {
      confidence += 0.1;
    }

    // Decrease confidence for very short responses
    if (response.length < 50) confidence -= 0.2;

    // Ensure confidence stays within bounds
    return Math.max(0.1, Math.min(0.99, confidence));
  }

  /**
   * Extract suggested actions from response
   */
  extractSuggestedActions(response) {
    const actions = [];
    
    if (response.toLowerCase().includes('schedule') || response.toLowerCase().includes('call')) {
      actions.push('Schedule a consultation');
    }
    
    if (response.toLowerCase().includes('case stud') || response.toLowerCase().includes('example')) {
      actions.push('View case studies');
    }
    
    if (response.toLowerCase().includes('learn more') || response.toLowerCase().includes('information')) {
      actions.push('Learn more about services');
    }

    return actions.length > 0 ? actions : ['Continue conversation'];
  }

  /**
   * Estimate token count (rough approximation)
   */
  estimateTokens(text) {
    // Rough estimation: ~4 characters per token for English
    return Math.ceil(text.length / 4);
  }

  /**
   * Check if service is available
   */
  isAvailable() {
    return this.genAI !== null;
  }

  /**
   * Get service status
   */
  getStatus() {
    return {
      available: this.isAvailable(),
      model: this.model,
      apiKeyConfigured: !!this.apiKey
    };
  }
}

// Export singleton instance
export const geminiService = new GeminiService();
export default geminiService; 